{"name":"GM: Set Player tokens v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"exportSource":{"world":"teste","system":"dnd5e","coreVersion":"0.6.5","systemVersion":0.93}},"scope":"global","command":"//This will set player tokens in scene to always display their token bars and nameplate on mouse hover, and sets the first bar to represent HP and removes the second token bar.\r\n\r\nif (canvas.tokens.placeables.filter(token => token.actor !== null).length >0) {\r\n    const tokens =canvas.tokens.placeables.filter(token => token.actor.isPC).map(token => {\r\n    return {\r\n        _id: token.id,\r\n        \"bar1.attribute\": \"attributes.hp\",\r\n        \"bar2.attribute\": \"\",\r\n        \"displayName\": CONST.TOKEN_DISPLAY_MODES.HOVER,\r\n        \"displayBars\": CONST.TOKEN_DISPLAY_MODES.ALWAYS\r\n    };\r\n    });\r\n\r\n    canvas.scene.updateEmbeddedEntity('Token', tokens);\r\n} else ui.notifications.warn(`The scene doesn't have any actor.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/spells/wind-grasp-air-1.jpg","actorIds":[],"_id":"1gX9GS5rsrEUQ7zl"}
{"name":"Paladin: Lay on Hands v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Apply Lay on Hands feature to a target character.\r\n//How to use: Select only one token that have Lay on Hands (equal to 'featName') and mark a target.\r\n//If you have control over the target, the heal will be applied, otherwise the GM or the player will have to do it manually\r\n\r\nlet confirmed = false;\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Lay on Hands\";\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n    if (featData !== null) { //if have the required feature\r\n        if (game.user.targets.size == 1) { //if have one target\r\n            if(featData.data.data.uses.value > 0) { //check if there are uses available  \r\n\r\n                let featUpdate = duplicate(featData);\r\n                let targetActor = game.user.targets.values().next().value.actor;\r\n                let maxUses = featUpdate.data.uses.value;\r\n                let maxHeal = Math.clamped(maxUses, 0, targetActor.data.data.attributes.hp.max - targetActor.data.data.attributes.hp.value);\r\n                const cureNumber = 5;          \r\n\r\n                let content = `<p><em>${actorData.name} prepares to lay hands on ${targetActor.data.name}.</em></p>\r\n                                <form>\r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"flavor\">Flavor speech:</label>\r\n                                        <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\r\n                                    </div>                    \r\n                                    <div class=\"form-group\">\r\n                                        <label for=\"num\">Restore HP (Max: ${maxHeal}):</label>\r\n                                        <input id=\"num\" name=\"num\" type=\"number\" min=\"1\" max=\"${maxHeal}\" value=\"1\"></input>\r\n                                    </div>\r\n                                </form>\r\n                                <p>Curing poison or disease will always consume ${cureNumber} uses.</p>\r\n                                <p><strong>You have ${maxUses} uses remaining before resting.</strong></p>\r\n                                `;\r\n                new Dialog({\r\n                    title: \"Lay on Hands Healing\",\r\n                    content: content,      \r\n                    buttons: {     \r\n                        one: {\r\n                            icon: '<i class=\"fas fa-plus\"></i>',\r\n                            label: \"Heal\",\r\n                            callback: (html) =>               \r\n                            {\r\n                                //heal button function\r\n                                let number = Math.floor(Number(html.find('#num')[0].value));\r\n                                if (number > 0 && maxHeal >= number && maxHeal > 0) {\r\n\r\n                                    let chatMsg = `\r\n                                    <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\" data-spell-level=\"${featData.data.data.level}\">\r\n                                        <header class=\"card-header flexrow\">\r\n                                            <img src=\"${featUpdate.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                                            <h3 class=\"item-name\">\r\n                                            ${featName}</h3>\r\n                                        </header>\r\n                                        <div class=\"card-content\">\r\n                                            <p>${actorData.name} lays hands on ${targetActor.data.name} for ${number} HP.</p>\r\n                                            <p><strong>${html.find('#flavor')[0].value}</strong></p>\r\n                                            <details closed=\"\">\r\n                                            <summary>Toggle description</summary>\r\n                                            ${featUpdate.data.description.value}\r\n                                            </details>                                            \r\n                                        </div>\r\n                                    </div>\r\n                                    `;\r\n\r\n                                    if (targetActor.permission !== CONST.ENTITY_PERMISSIONS.OWNER) {\r\n                                        //not allowed to apply healing\r\n                                        new Roll(`${number}`).roll().toMessage({\r\n                                            speaker: ChatMessage.getSpeaker(),\r\n                                            flavor: chatMsg});\r\n                                    } else {\r\n                                        //allowed to apply healing\r\n                                        toChat(chatMsg);\r\n                                        game.actors.find(a => a._id===targetActor._id).update( {\r\n                                            \"data.attributes.hp.value\" : targetActor.data.data.attributes.hp.value + number\r\n                                        });\r\n                                    }\r\n\r\n                                    //update actor data\r\n                                    featUpdate.data.uses.value = featUpdate.data.uses.value - number;\r\n                                    featUpdate.data.chatFlavor = html.find('#flavor')[0].value;\r\n                                    actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n                                    \r\n                                    confirmed = true;\r\n\r\n                                } else if (number > maxUses) {\r\n                                    ui.notifications.warn(`You don't have this amount of charges left.`);\r\n                                } else if (maxHeal == 0) {\r\n                                    ui.notifications.warn(`Your target's HP is already full.`);\r\n                                } else if (number > maxHeal) {\r\n                                    ui.notifications.warn(`Your target's missing less HP than you're trying to heal.`);                                \r\n                                } else ui.notifications.warn(`You must inform the amount of charges to be used.`);\r\n                            }\r\n                        },\r\n                        two: {\r\n                            icon: '<i class=\"fas fa-medkit\"></i>',\r\n                            label: \"Cure\",\r\n                            callback: (html) =>               \r\n                            {\r\n                                //cure poison disease button function                  \r\n                                if (maxUses >= cureNumber) {\r\n\r\n                                    let chatMsg = `\r\n                                    <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\" data-spell-level=\"${featData.data.data.level}\">\r\n                                        <header class=\"card-header flexrow\">\r\n                                            <img src=\"${featUpdate.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                                            <h3 class=\"item-name\">\r\n                                            ${featName}</h3>\r\n                                        </header>\r\n                                        <div class=\"card-content\">\r\n                                            <p>${actorData.name} lays hands on ${targetActor.data.name} and cures one poison or disease.</p>\r\n                                            <p><strong>${html.find('#flavor')[0].value}</strong></p>\r\n                                            <details closed=\"\">\r\n                                            <summary>Toggle description</summary>\r\n                                            ${featUpdate.data.description.value}\r\n                                            </details>\r\n                                        </div>\r\n                                    </div>\r\n                                    `;\r\n\r\n                                    toChat(chatMsg);\r\n\r\n                                    //update actor data\r\n                                    featUpdate.data.uses.value = featUpdate.data.uses.value - cureNumber;\r\n                                    featUpdate.data.chatFlavor = html.find('#flavor')[0].value;\r\n                                    actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n                                    \r\n                                    confirmed = true;\r\n\r\n                                } else ui.notifications.warn(`You don't have this amount of charges left. Each cure poison or disease costs 5 charges.`);\r\n                            } \r\n                        },            \r\n                        three: {\r\n                            icon: '<i class=\"fas fa-times\"></i>',\r\n                            label: \"Cancel\"\r\n                        }  \r\n                    },\r\n                    default: \"Cancel\",\r\n                    close: html => {\r\n                        if (confirmed) {\r\n                            if (effectsOn) {\r\n                                //add effects filter template with Tokenmagic module\r\n                                let params = \r\n                                [{\r\n                                    filterType: \"xbloom\",\r\n                                    threshold: 0.35,\r\n                                    bloomScale: 0,\r\n                                    brightness: 1.2,\r\n                                    blur: 0.1,\r\n                                    padding: 10,\r\n                                    quality: 15,\r\n                                    blendMode: 0,\r\n                                    autoDestroy: true,\r\n                                    animated:\r\n                                    {\r\n                                        bloomScale: \r\n                                        { \r\n                                            active: true, \r\n                                            loopDuration: 3000, \r\n                                            loops: 4,\r\n                                            animType: \"syncCosOscillation\", \r\n                                            val1: 0, \r\n                                            val2: 2\r\n                                        },\r\n                                        threshold:  \r\n                                        { \r\n                                            active: false, \r\n                                            loopDuration: 3000, \r\n                                            loops: 4,\r\n                                            animType: \"syncCosOscillation\", \r\n                                            val1: 0.05, \r\n                                            val2: 1.9\r\n                                        }\r\n                                    }\r\n                                }];                        \r\n                                TokenMagic.addFiltersOnSelected(params);\r\n                            }\r\n                        }\r\n                    }\r\n                }).render(true);            \r\n            } else\r\n                ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);\r\n        } else\r\n            ui.notifications.warn(`Target one token. Double right-click if you're a player or single right-click then select target if you're GM`);\r\n    } else\r\n        ui.notifications.warn(`Selected character must have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/light_10.jpg","actorIds":[],"_id":"5HPKOeB4khV1AGhK"}
{"name":"General: Paste image from journal v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"exportSource":{"world":"teste","system":"dnd5e","coreVersion":"0.6.5","systemVersion":0.93}},"scope":"global","command":"//Open a journal note and paste it's image to chat\r\n\r\nlet journalCheck = game.journal.find(journal => journal.sheet.rendered);\r\n\r\nif (journalCheck !== null) {\r\n  let imageUrl = game.journal.find(journal => journal.sheet.rendered).data.img;\r\n  if (imageUrl !== null && imageUrl !== undefined && imageUrl !== \"\") {\r\n    ChatMessage.create({\r\n      user: game.user._id,\r\n      content: `<img src=\"${imageUrl}\" />`,\r\n      type: CONST.CHAT_MESSAGE_TYPES.OOC\r\n    });\r\n  } else ui.notifications.warn(`This journal does not have an image set.`);\r\n} else ui.notifications.warn(`Open one journal first.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/items/inventory/parchment.jpg","actorIds":[],"_id":"75NLNvdtukawjrMq"}
{"name":"Warlock: Hellish Rebuke v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Conjures Hellish Rebuke\r\n//Requires a token with the feature, checks if Innate Magic is available as well.\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Hellish Rebuke\";\r\nlet featDmg = \"d10\";\r\n\r\n//declarations\r\nlet actorData = canvas.tokens.controlled;\r\nlet pactCast = false;\r\nlet innateCast = false;\r\nlet confirmed = false;\r\nlet dmgPact = \"\";\r\nlet dmgInnate = \"\";\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n  }\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    let featDataInnate = actorData ? actorData.items.find(i => i.name===featName && i.data.data.preparation.mode===\"innate\") : null;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName && i.data.data.preparation.mode!==\"innate\") : null;\r\n    let featDataInnateUses = 0;\r\n    let featDataUses = 0;\r\n\r\n    if (featData !== null || featDataInnate !== null) { //if have the required feature\r\n\r\n        //verify pact and innate magic existance, calculate damage for each type of magic, check number os uses left and prepare dialog content\r\n        let content = `<p>Preparing to cast ${featName}. You can cast it as:</p>`;\r\n        let count = 0;\r\n        if (featData !== null) {\r\n            featDataUses = actorData.data.data.spells.pact.value;\r\n            dmgPact = `${featData.data.data.damage.parts[0][0]}+${actorData.data.data.spells.pact.level-1}${featDmg}`;\r\n            content += `<p><li>Pact Magic (${featDataUses} left) for ${dmgPact} damage</li></p>`;\r\n            count++;\r\n        } else {\r\n            \r\n        }\r\n        if (featDataInnate !== null) {\r\n            featDataInnateUses = featDataInnate.data.data.uses.value;\r\n            dmgInnate = featDataInnate.data.data.damage.parts[0][0];\r\n            content += `<p><li>Innate Magic (${featDataInnateUses} left) for ${dmgInnate} damage</li></p>`;\r\n            count++;\r\n        } else {\r\n            \r\n        }\r\n        if (count == 2) {\r\n            content += `<p>Which one do you want to use?</p>`;\r\n        }\r\n        \r\n        if(featDataUses > 0 || featDataInnateUses > 0) { //check if there are uses available              \r\n            let buttons = {};\r\n\r\n            if (featData !== null) {\r\n                buttons['pactButton'] = {\r\n                    label: `Pact Magic`,\r\n                    callback: (html) =>               \r\n                    {\r\n                        if (featDataUses > 0) {\r\n                            //consume pact spell uses\r\n\r\n                            //prepare chat content\r\n                            let pactMagicUses = actorData;\r\n                            pactMagicUses.data.data.spells.pact.value = actorData.data.data.spells.pact.value - 1;\r\n                            actorData.updateEmbeddedEntity(\"OwnedItem\", pactMagicUses);\r\n                            \r\n\r\n                            let chatMsg = `\r\n                            <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\">\r\n                                <header class=\"card-header flexrow\">\r\n                                    <img src=\"${featData.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                                    <h3 class=\"item-name\">\r\n                                    ${featName}</h3>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <p>${actorData.name} uses ${featName}.</p>\r\n                                    <details closed=\"\">\r\n                                    <summary>Toggle description</summary>\r\n                                    ${featData.data.data.description.value}\r\n                                    </details>\r\n                                </div>\r\n                            </div>\r\n                            `;      \r\n\r\n                            //roll dice\r\n                            new Roll(`${dmgPact}`).roll().toMessage({\r\n                                speaker: ChatMessage.getSpeaker(),\r\n                                flavor: chatMsg});\r\n                            \r\n                            confirmed = true;\r\n\r\n                        } else\r\n                            ui.notifications.warn(`${actorData.name} does not have any Pact Magic uses of ${featName} left. Use Innate Magic instead.`);\r\n                    }\r\n                };\r\n            }\r\n\r\n            if (featDataInnate !== null) {\r\n                buttons['innateButton'] = {\r\n                    label: \"Innate Magic\",\r\n                    callback: (html) =>               \r\n                    {\r\n                        if (featDataInnateUses > 0) {\r\n                            //consume innate spell uses\r\n\r\n                            //prepare chat content\r\n                            let featDataInnateConsume = duplicate(featDataInnate);\r\n                            featDataInnateConsume.data.uses.value = featDataInnateConsume.data.uses.value - 1;\r\n                            actorData.updateEmbeddedEntity(\"OwnedItem\", featDataInnateConsume);\r\n                            \r\n                            let chatMsg = `\r\n                            <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\">\r\n                                <header class=\"card-header flexrow\">\r\n                                    <img src=\"${featDataInnate.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                                    <h3 class=\"item-name\">\r\n                                    ${featName}</h3>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <p>${actorData.name} uses ${featName}.</p>\r\n                                    <details closed=\"\">\r\n                                    <summary>Toggle description</summary>\r\n                                    ${featDataInnate.data.data.description.value}\r\n                                    </details>\r\n                                </div>\r\n                            </div>\r\n                            `;                    \r\n\r\n                            //roll dice\r\n                            new Roll(`${dmgInnate}`).roll().toMessage({\r\n                                speaker: ChatMessage.getSpeaker(),\r\n                                flavor: chatMsg});\r\n                            \r\n                            confirmed = true;\r\n\r\n                        } else\r\n                            ui.notifications.warn(`${actorData.name} does not have any Innate Magic uses of ${featName} left. Use Pact Magic instead.`);\r\n                    }                            \r\n                };\r\n            }                \r\n\r\n            buttons['cancelButton'] = {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: \"Cancel\"\r\n            }                    \r\n\r\n            new Dialog({\r\n                title: `Using ${featName}`,\r\n                content: content,      \r\n                buttons: buttons,\r\n                default: \"Cancel\",\r\n                close: html => {\r\n                    if (effectsOn && confirmed) {\r\n                        //add effects filter template with Tokenmagic module\r\n                        let params =\r\n                        [{\r\n                            filterType: \"distortion\",\r\n                            maskPath: \"/modules/tokenmagic/fx/assets/waves-2.png\",\r\n                            maskSpriteScaleX: 7,\r\n                            maskSpriteScaleY: 7,\r\n                            padding: 50,\r\n                            autoDestroy: true,\r\n                            animated:\r\n                            {\r\n                                maskSpriteX: { active: true, speed: 0.05, animType: \"move\", loops: 2 },\r\n                                maskSpriteY: { active: true, speed: 0.07, animType: \"move\", loops: 2 }\r\n                            }\r\n                        },\r\n                        {\r\n                            filterType: \"glow\",\r\n                            distance: 10,\r\n                            outerStrength: 8,\r\n                            innerStrength: 0,\r\n                            color: 0xB03000,\r\n                            quality: 0.5,\r\n                            autoDestroy: true,\r\n                            animated:\r\n                            {\r\n                                color: \r\n                                {\r\n                                    active: true, \r\n                                    loopDuration: 3000, \r\n                                    animType: \"colorOscillation\", \r\n                                    val1:0xB03000, \r\n                                    val2:0xFFD010,\r\n                                    loops: 3\r\n                                }\r\n                            }\r\n                        }\r\n                        ];                               \r\n                        TokenMagic.addFiltersOnSelected(params);\r\n                    }\r\n                }\r\n            }).render(true);            \r\n        } else\r\n            ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);\r\n    } else\r\n        ui.notifications.warn(`Selected character must have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"modules/plutonium/media/icon/spell/phb-hellish-rebuke.jpg","actorIds":[],"_id":"BVS2cwGoY6yE4G67"}
{"name":"GM: Remove all tokens config v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"exportSource":{"world":"teste","system":"dnd5e","coreVersion":"0.6.5","systemVersion":0.93}},"scope":"global","command":"//This will set every token in scene to always never display their token bars and nameplate.\r\n\r\nif (canvas.tokens.placeables.filter(token => token.actor !== null).length >0) {\r\n    const tokens =canvas.tokens.placeables.map(token => {\r\n    return {\r\n        _id: token.id,\r\n        \"bar1.attribute\": \"attributes.hp\",\r\n        \"bar2.attribute\": \"\",\r\n        \"displayName\": CONST.TOKEN_DISPLAY_MODES.NONE,\r\n        \"displayBars\": CONST.TOKEN_DISPLAY_MODES.NONE\r\n    };\r\n    });\r\n\r\n    canvas.scene.updateEmbeddedEntity('Token', tokens);\r\n} else ui.notifications.warn(`The scene doesn't have any actor.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/yellow_43.jpg","actorIds":[],"_id":"IRxtWcGczvauDuuB"}
{"name":"General: Delete filters on Selected v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"// Delete all filters on the selected tokens/tiles\r\nTokenMagic.deleteFiltersOnSelected();","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/items/inventory/wand-star.jpg","actorIds":[],"_id":"JQut7axRLRyDUVu0"}
{"name":"General: Stealth v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Activate Stealth and apply effects\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Stealth\";\r\nlet featId = \"ste\";\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    \r\n    actorData = actorData[0].actor;\r\n    \r\n    //check if Stealth is active\r\n    if (actorData.data.flags.stealthRoll !== null && actorData.data.flags.stealthRoll !== undefined) {\r\n\r\n        let skillCheck = actorData.data.flags.stealthRoll;\r\n\r\n        let content = `<p>${actorData.name} ${featName} check was ${skillCheck}.</em></p>`;\r\n        new Dialog({\r\n            title: `${featName}`,\r\n            content: content,      \r\n            buttons: {     \r\n                one: {\r\n                    icon: '<i class=\"fas fa-user\"></i>',                    \r\n                    label: \"Unhide\",\r\n                    callback: (html) =>               \r\n                    {\r\n                        let obj = {};\r\n                        obj['flags.stealthRoll'] = null;\r\n                        actorData.update(obj);               \r\n\r\n                        TokenMagic.deleteFiltersOnSelected();                        \r\n                    }\r\n                },\r\n                two: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: \"Show Roll\",\r\n                    callback: (html) =>               \r\n                    {\r\n                        let chatMsg = `<div class=\"dnd5e chat-card item-card\"\">${actorData.name} rolled ${skillCheck} for ${featName}.</div>`;\r\n                        toChat(chatMsg);\r\n                    }                    \r\n                },\r\n                three: {\r\n                    icon: '<i class=\"fas fa-times\"></i>',\r\n                    label: \"Cancel\"\r\n                }                \r\n            },\r\n            default: \"Cancel\"\r\n        }).render(true);\r\n\r\n    } else {\r\n\r\n        //use skill and update roll result to a flag\r\n        async function main() {\r\n            let roll = await actor.rollSkill(featId);\r\n            if (roll) {\r\n                let result = eval(roll.result);\r\n                let obj = {};\r\n                obj['flags.stealthRoll'] = result;\r\n                actorData.update(obj);      \r\n                //add effects filter template with Tokenmagic module\r\n                let params =\r\n                [{\r\n                    filterType: \"fumes\",\r\n                    color: 0x909090,\r\n                    time: 0,\r\n                    blend: 1,\r\n                    animated :\r\n                    {\r\n                        time : \r\n                        { \r\n                        active: true, \r\n                        speed: 0.0006, \r\n                        animType: \"move\" \r\n                        }\r\n                    }\r\n                }];\r\n                TokenMagic.addFiltersOnSelected(params);   \r\n            }   \r\n        }\r\n        main();\r\n    }\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/green_18.jpg","actorIds":[],"_id":"Lq6QutvU3XwlaLzj"}
{"name":"Paladin: Divine Sense v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Activate Divine Sense and apply effects\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Divine Sense\";\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n    if (featData !== null) { //if have the required feature\r\n        if(featData.data.data.uses.value > 0) { //check if there are uses available              \r\n                       \r\n            //roll dice and update actor  \r\n            //use the feature\r\n            async function main() {\r\n                let roll = await featData.roll();\r\n\r\n                if (roll) {\r\n                    //add effects filter template with Tokenmagic module\r\n                    let params =\r\n                    [{\r\n                        filterType: \"wave\",\r\n                        autoDestroy: true,\r\n                        time: 0,\r\n                        anchorX: 0.5,\r\n                        anchorY: 0.5,\r\n                        strength: 0.015,\r\n                        frequency: 60,\r\n                        color: 0xFFFFFF,\r\n                        maxIntensity: 3.0,\r\n                        minIntensity: 0.8,\r\n                        padding:10,\r\n                        loops: 1,\r\n                        animated :\r\n                        {\r\n                        time : \r\n                        { \r\n                            active: true, \r\n                            speed: 0.0085, \r\n                            animType: \"move\",\r\n                            loops: 3\r\n                        },\r\n                        anchorX :\r\n                        {\r\n                            active: false,\r\n                            val1: 0.15,\r\n                            val2: 0.85,\r\n                            animType: \"syncCosOscillation\",\r\n                            loopDuration: 20000,\r\n                            loops: 3\r\n                        },\r\n                        anchorY :\r\n                        {\r\n                            active: false,\r\n                            val1: 0.15,\r\n                            val2: 0.85,\r\n                            animType: \"syncSinOscillation\",\r\n                            loopDuration: 20000,\r\n                            loops: 3\r\n                        }\r\n                        }\r\n                    }];\r\n                    TokenMagic.addFiltersOnSelected(params);\r\n                }\r\n            }\r\n            main();\r\n        } else\r\n            ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);\r\n    } else\r\n        ui.notifications.warn(`Selected character must have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/light_02.jpg","actorIds":[],"_id":"PryVSQ1gLajxRoIw"}
{"name":"GM: Compendium clone v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Clone compendiums by writting the name of source compendium and the one you want to receive all the values from it\r\n\r\n(function ()\r\n{\r\n\r\n    function transferCompendium(source, target)\r\n    {\r\n\r\n        const sourceCompendiumName = source;\r\n        const targetCompendiumName = target;\r\n\r\n        const process = async (sourceCompendiumName, targetCompendiumName) => {\r\n        const sourceCompendium = game.packs.find(pack => pack.metadata.label === sourceCompendiumName);\r\n        const targetCompendium = game.packs.find(pack => pack.metadata.label === targetCompendiumName);\r\n        if (!sourceCompendium) {\r\n            console.error(\"Source target compendium invalid\");\r\n            return;\r\n        }\r\n        if (!targetCompendium) {\r\n            console.error(\"Target target compendium invalid\");\r\n            return;\r\n        }\r\n\r\n        const sourceIndex = await sourceCompendium.getIndex();\r\n        const targetIndex = await targetCompendium.getIndex();\r\n\r\n        // start copying\r\n        sourceIndex.forEach(entry => {\r\n            if (!targetIndex.find(e => e.name === entry.name)) {\r\n            console.log(\"Copying \" + entry.name);\r\n            sourceCompendium.getEntity(entry._id).then(entity => {\r\n                console.log(\"Importing \" + entity.name);\r\n                targetCompendium.importEntity(entity);\r\n            });\r\n            } else {\r\n            console.log(\"Not importing duplicate \" + entry.name);\r\n            }\r\n        });\r\n        };\r\n\r\n        process(sourceCompendiumName, targetCompendiumName);\r\n\r\n    }\r\n\r\n  new Dialog({\r\n    title: \"Select Compendiums\",\r\n    content: `\r\n     <p>Select compendiums source and target to copy</p>\r\n     <form>\r\n      <div class=\"form-group\">\r\n       <label>Source:</label>\r\n       <input type=\"text\" id=\"source-compendium\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n       <label>Target:</label>\r\n       <input type=\"text\" id=\"target-compendium\">\r\n      </div>\r\n     </form>\r\n     `,\r\n    buttons: {\r\n      one: {\r\n        icon: '<i class=\"fas fa-check\"></i>',\r\n        label: \"Confirm\",\r\n        callback: (html) =>\r\n        {\r\n            const sourceCompendiumName = html.find('[id=source-compendium]')[0].value;\r\n            const targetCompendiumName = html.find('[id=target-compendium]')[0].value;\r\n            transferCompendium(sourceCompendiumName, targetCompendiumName);\r\n        }\r\n      },\r\n      two: {\r\n        icon: '<i class=\"fas fa-times\"></i>',\r\n        label: \"Cancel\",\r\n      }\r\n    },\r\n    default: \"Cancel\"\r\n  }).render(true);\r\n  \r\n})();","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/items/inventory/book-blue.jpg","actorIds":[],"_id":"RGNohEGQtqevRb1g"}
{"name":"General: Spell template v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Apply spell templates\r\n\r\nlet applyChanges = false\r\nnew Dialog({\r\n  title: `5e Template creator`,\r\n  content: `\r\n    <style>\r\n      #dnd-template-creator .form-fields.buttons {\r\n        justify-content: flex-start !important;\r\n      }\r\n      #dnd-template-creator .button {\r\n        flex: 1 !important;\r\n      }\r\n      #dnd-template-creator .radios input[type=\"radio\"] {\r\n        opacity: 0;\r\n        position: fixed;\r\n        width: 0;\r\n      }\r\n      #dnd-template-creator .radios label {\r\n        display: flex;\r\n        flex: 1 !important;\r\n        margin: -2px 0;\r\n        line-height: 22px;\r\n        background: rgba(0, 0, 0, 0.1);\r\n        border: 2px groove #f0f0e0;\r\n        width: 100%;\r\n        border-radius: 3px;\r\n        font-size: 14px;\r\n        font-family: \"Signika\", sans-serif;\r\n        justify-content: center;\r\n        align-items: center;\r\n      }\r\n      #dnd-template-creator .radios label i {\r\n        margin-right: 5px\r\n      }\r\n      #dnd-template-creator .radios label:hover {\r\n        box-shadow: 0 0 5px red;\r\n      }\r\n      #dnd-template-creator .radios input[type=\"radio\"]:checked + label {\r\n        background: rgba(0, 0, 0, 0.2);\r\n      }\r\n      #dnd-template-creator .dialog-buttons {\r\n        align-content: flex-end;\r\n      }\r\n    </style>\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <p class=\"notes\">Zone type:</p>\r\n        <div class=\"form-fields buttons radios\">\r\n          <input type=\"radio\" name=\"shape\" id=\"square\" value=\"square\" checked>\r\n          <label for=\"square\"><i class=\"fas fa-square\"></i> Square</label>\r\n          <input type=\"radio\" name=\"shape\" id=\"circle\" value=\"circle\">\r\n          <label for=\"circle\"><i class=\"fas fa-dot-circle\"></i> Circle</label>\r\n          <input type=\"radio\" name=\"shape\" id=\"cone\" value=\"cone\">\r\n          <label for=\"cone\"><i class=\"fas fa-wifi\"></i> Cone</label>\r\n          <input type=\"radio\" name=\"shape\" id=\"line\" value=\"line\">\r\n          <label for=\"line\"><i class=\"fas fa-ruler-horizontal\"></i> Line</label>\r\n        </div>\r\n      </div>\r\n\r\n      <hr>\r\n\r\n      <div class=\"form-group\">\r\n        <p class=\"notes\">Predefined values:</p>\r\n        <div class=\"form-fields buttons\">\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(5)\">5 ft</button>\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(10)\">10 ft</button>\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(15)\">15 ft</button>\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(20)\">20 ft</button>\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(30)\">30 ft</button>\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(60)\">60 ft</button>\r\n          <button type=\"button\" class=\"button\" onclick=\"updateRadiusValue(120)\">120 ft</button>\r\n        </div>\r\n      </div>\r\n\r\n      <hr>\r\n\r\n      <div class=\"form-group\">\r\n      <p class=\"notes\">Template radius in feet:</p>\r\n      <div class=\"form-fields\">\r\n        <input type=\"range\" id=\"radius\" name=\"radius\" value=\"5\" min=\"5\" max=\"120\" step=\"5\" oninput=\"updateRangeValue(this.value);\">\r\n        <span id=\"range-value\" class=\"range-value\">5</span>\r\n      </div>\r\n      </div>\r\n    </form>\r\n    <script>\r\n      function updateRadiusValue(val) {\r\n        document.getElementById(\"radius\").value = val\r\n        updateRangeValue(val)\r\n      }\r\n      function updateRangeValue(val) {\r\n        document.getElementById(\"range-value\").innerHTML = val\r\n      }\r\n    </script>\r\n  `,\r\n  buttons: {\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel`\r\n    },\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply`,\r\n      callback: () => applyChanges = true\r\n    }\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n\r\n      // Template settings\r\n      const templateData = {\r\n        user: game.user._id,\r\n        distance: parseFloat(html.find('[name=\"radius\"]')[0].value),\r\n        direction: 0,\r\n        x: 0,\r\n        y: 0,\r\n        fillColor: game.user.color\r\n      }\r\n\r\n      let templateShape = html.find('[name=\"shape\"]')\r\n      for (var i = 0, length = templateShape.length; i < length; i++) {\r\n        if (templateShape[i].checked) {\r\n          templateShape = templateShape[i].value\r\n          break\r\n        }\r\n      }\r\n\r\n      switch (templateShape) {\r\n        case \"cone\":\r\n          templateData.t = \"cone\"\r\n          templateData.angle = 53.13\r\n          break\r\n        case \"square\":\r\n          templateData.t = \"rect\"\r\n          templateData.distance = Math.hypot(templateData.distance, templateData.distance)\r\n          templateData.width = templateData.distance\r\n          templateData.direction = 45\r\n          break\r\n        case \"line\":\r\n          templateData.t = \"ray\"\r\n          templateData.width = 5\r\n          break\r\n        case \"circle\":\r\n          templateData.t = \"circle\"\r\n          break\r\n        default:\r\n          break\r\n      }\r\n\r\n      const measuredTemplate = new MeasuredTemplate(templateData)\r\n\r\n      // Prepare layer for preview\r\n      const highlighterName = 'Preview.' + Math.random().toString(36).substr(2, 9)\r\n      const highlighter = canvas.grid.addHighlightLayer(highlighterName)\r\n      const initialLayer = canvas.activeLayer\r\n      measuredTemplate.draw()\r\n      measuredTemplate.layer.activate()\r\n      measuredTemplate.layer.preview.addChild(measuredTemplate)\r\n\r\n\r\n      // Calculate the highlight\r\n      function highlightGrid() {\r\n        const grid = canvas.grid,\r\n          d = canvas.dimensions,\r\n          bc = \"0x000000\",\r\n          fc = measuredTemplate.data.fillColor.replace('#', '0x')\r\n\r\n        // Clear existing highlight\r\n        canvas.grid.clearHighlightLayer(highlighterName)\r\n\r\n        /*\r\n        ----------- THX TO FOUNDRY CREATOR FOR THIS CODE FROM CORE FOUNDRY. --------------\r\n        */\r\n        // Get number of rows and columns\r\n        const nr = Math.ceil(((measuredTemplate.data.distance * 1.5) / d.distance) / (d.size / grid.h));\r\n        const nc = Math.ceil(((measuredTemplate.data.distance * 1.5) / d.distance) / (d.size / grid.w));\r\n        // Get the offset of the template origin relative to the top-left grid space\r\n        const [tx, ty] = canvas.grid.getTopLeft(measuredTemplate.data.x, measuredTemplate.data.y);\r\n        const [row0, col0] = grid.grid.getGridPositionFromPixels(tx, ty);\r\n        const hx = canvas.grid.w / 2;\r\n        const hy = canvas.grid.h / 2;\r\n        const isCenter = (measuredTemplate.data.x - tx === hx) && (measuredTemplate.data.y - ty === hy);\r\n        // Identify grid coordinates covered by the template Graphics\r\n        for (let r = -nr; r < nr; r++) {\r\n          for (let c = -nc; c < nc; c++) {\r\n            let [gx, gy] = canvas.grid.grid.getPixelsFromGridPosition(row0 + r, col0 + c);\r\n            const testX = (gx + hx) - measuredTemplate.data.x;\r\n            const testY = (gy + hy) - measuredTemplate.data.y;\r\n            let contains = ((r === 0) && (c === 0) && isCenter) || measuredTemplate.shape.contains(testX, testY);\r\n            if (!contains) continue;\r\n            grid.grid.highlightGridPosition(highlighter, { x: gx, y: gy, color: fc, border: bc });\r\n          }\r\n        }\r\n      }\r\n\r\n      /*\r\n      ----------- THX TO FOUNDRY CREATOR FOR THIS CODE FROM DND 5. --------------\r\n      */\r\n\r\n      // Preview handlers\r\n      const handlers = {}\r\n      let moveTime = 0\r\n\r\n      // Update placement (mouse-move)\r\n      handlers.mm = event => {\r\n        event.stopPropagation()\r\n        let now = Date.now() // Apply a 20ms throttle\r\n        if (now - moveTime <= 20) return\r\n        const center = event.data.getLocalPosition(measuredTemplate.layer)\r\n        const snapped = canvas.grid.getSnappedPosition(center.x, center.y, 2);\r\n        measuredTemplate.data.x = snapped.x\r\n        measuredTemplate.data.y = snapped.y\r\n        measuredTemplate.refresh()\r\n        highlightGrid()\r\n        moveTime = now\r\n      }\r\n\r\n      // Cancel the workflow (right-click)\r\n      handlers.rc = event => {\r\n        canvas.grid.destroyHighlightLayer(highlighterName)\r\n        measuredTemplate.layer.preview.removeChildren()\r\n        canvas.stage.off(\"mousemove\", handlers.mm)\r\n        canvas.stage.off(\"mousedown\", handlers.lc)\r\n        canvas.app.view.oncontextmenu = null\r\n        canvas.app.view.onwheel = null\r\n        initialLayer.activate()\r\n      }\r\n\r\n      // Confirm the workflow (left-click)\r\n      handlers.lc = event => {\r\n        handlers.rc(event)\r\n\r\n        const destination = canvas.grid.getSnappedPosition(measuredTemplate.data.x, measuredTemplate.data.y, 2);\r\n        measuredTemplate.data.x = destination.x\r\n        measuredTemplate.data.y = destination.y\r\n\r\n        canvas.scene.createEmbeddedEntity(\"MeasuredTemplate\", measuredTemplate.data)\r\n      }\r\n\r\n      // Rotate the template by 3 degree increments (mouse-wheel)\r\n      handlers.mw = event => {\r\n        if (event.ctrlKey) event.preventDefault()\r\n        event.stopPropagation()\r\n        let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15\r\n        let snap = event.shiftKey ? delta : 5\r\n        measuredTemplate.data.direction += (snap * Math.sign(event.deltaY))\r\n        measuredTemplate.refresh()\r\n        highlightGrid()\r\n      }\r\n\r\n      // Activate listeners\r\n      canvas.stage.on(\"mousemove\", handlers.mm)\r\n      canvas.stage.on(\"mousedown\", handlers.lc)\r\n      canvas.app.view.oncontextmenu = handlers.rc\r\n      canvas.app.view.onwheel = handlers.mw\r\n\r\n    }\r\n  }\r\n}, {\r\n  id: \"dnd-template-creator\"\r\n}).render(true)","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/spells/air-burst-air-1.jpg","actorIds":[],"_id":"SOUu97dpStSqjQ0N"}
{"name":"Druid: Symbiotic Entity v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Apply Symbiotic Entity effects including Halo of Spores extra dice and Melee Bonus damage\r\n//Requires that the actor have the class and features named similar to the variables on top of the macro\r\n\r\n//declarations\r\nlet symbioticDmgAdded = false;\r\nlet confirmed = false;\r\nlet enabled = false;\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\nconst noEffectsIcon = 'icons/svg/oak.svg';\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Symbiotic Entity\";\r\nlet featConsumeName = \"Wild Shape\";\r\nlet featSecondaryEffectName = \"Halo of Spores\";\r\nlet symbioticClassName = \"Druid\";\r\nlet actorData = canvas.tokens.controlled;\r\nlet symbioticDmg = \"1d6\";\r\nlet symbioticDmg2 = \"2d\";\r\nlet baseHPTemp = 4;\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    let actorTokenData = actorData[0];\r\n    actorData = actorData[0].actor;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n    let featClass = actorData ? actorData.items.find(i => i.name===symbioticClassName) : null;\r\n    let featConsume = actorData ? actorData.items.find(i => i.name===featConsumeName) : null;\r\n    let featSecondaryEffect = actorData ? actorData.items.find(i => i.name===featSecondaryEffectName) : null;\r\n    if (featData !== null && featClass !== null && featConsume !== null && featSecondaryEffect !== null) { //if have the required feature\r\n        \r\n            let dmg = JSON.parse(JSON.stringify(actorData.data.data.bonuses.mwak.damage));\r\n            let dmg2 = JSON.parse(JSON.stringify(featSecondaryEffect.data.data.damage.parts[0][0]));\r\n            let currentHPTemp = actorData.data.data.attributes.hp.temp;\r\n            let featSecondaryEffectUpdate = duplicate(featSecondaryEffect);\r\n            if (currentHPTemp == null || currentHPTemp == undefined || currentHPTemp == \"\")\r\n                currentHPTemp = '0';\r\n            //verify if symbiotic entity and its damage bonus are active\r\n            if (actorData.data.flags.symbioticMacro !== null && actorData.data.flags.symbioticMacro !== undefined) {    \r\n                enabled = true;\r\n                if (actorData.data.flags.symbioticMacro[\"symbioticDmgAdded\"] == true) {\r\n                    symbioticDmgAdded = true;\r\n                }\r\n            }\r\n            \r\n            if (enabled) {\r\n                //if symbiotic entity is active, disable it\r\n                //reset melee weapon attack and halo of spores bonus\r\n                let obj = {};\r\n                obj['flags.symbioticMacro'] = null;\r\n                if(symbioticDmgAdded) {\r\n                    if (dmg == symbioticDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\r\n                        obj['data.bonuses.mwak.damage']='';\r\n                    } else {\r\n                        let patt = `\\\\s\\\\+\\\\s${symbioticDmg}($|[^0123456789dkrxcm(@{])`;\r\n                        let result = dmg.search(patt);\r\n                        if (result !== -1) {\r\n                            let len = ('' + symbioticDmg).length;\r\n                            let origDmg = duplicate(dmg);\r\n                            let firstHalfDmg = duplicate(dmg).substring(0,result);\r\n                            let lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\r\n                            dmg = `${firstHalfDmg}${lastHalfDmg}`;\r\n                            obj['data.bonuses.mwak.damage']=dmg;\r\n                        } else {\r\n                            ui.notifications.error(`Failed to revert global melee weapon attack bonus, please revert manually.`);\r\n                        }\r\n                    }\r\n                    featSecondaryEffectUpdate.data.damage.parts[0][0] = dmg2.replace(symbioticDmg2, \"1d\");\r\n                    actorData.updateEmbeddedEntity(\"OwnedItem\", featSecondaryEffectUpdate);\r\n                }\r\n                actorData.update(obj);\r\n\r\n                confirmed = true;\r\n                let content = `<p>Your ${featName} has been deactivated.<br></p>\r\n                                <p>Do you want to keep your current <strong>${currentHPTemp}</strong> temporary HP?</p>\r\n                                <p><strong>Keep it only if the current source is not ${featName}.</strong></p>\r\n                                `;\r\n                new Dialog({\r\n                    title: `${featName} temporary HP`,\r\n                    content: content,      \r\n                    buttons: {\r\n                        one: {\r\n                            icon: '<i class=\"fas fa-check\"></i>',\r\n                            label: \"Remove\"          \r\n                        },\r\n                        two: {\r\n                            icon: '<i class=\"fas fa-times\"></i>',\r\n                            label: \"Keep\",\r\n                            callback: (html) =>               \r\n                            {\r\n                                confirmed = false;\r\n                            }                                          \r\n                        }  \r\n                    },\r\n                    default: \"Remove\",\r\n                    close: html => {\r\n\r\n                        if (confirmed) {\r\n                            let tempHPUpdate = actorData;\r\n                            tempHPUpdate.data.data.attributes.hp.temp = null;\r\n                            actorData.updateEmbeddedEntity(\"OwnedItem\", tempHPUpdate);  \r\n                        }                        \r\n\r\n                        if (effectsOn) {\r\n                            //delete all filters on the selected tokens/tiles\r\n                            TokenMagic.deleteFiltersOnSelected();\r\n                        } else {\r\n                            //remove icon from token\r\n                            if (actorTokenData.data.effects.includes(noEffectsIcon)) {\r\n                                actorTokenData.toggleEffect(noEffectsIcon);\r\n                            }\r\n                        }\r\n                        \r\n                        let chatMsg = `<div class=\"dnd5e chat-card item-card\"\">${actorData.name} is no longer under the effects of ${featName}.</div>`;\r\n                        toChat(chatMsg);\r\n                    }\r\n                }).render(true);  \r\n\r\n\r\n\r\n            \r\n            } else {\r\n                if(featConsume.data.data.uses.value > 0) { //check if there are uses available\r\n                //if symbiotic entity is not active, enable it\r\n                let featUpdate = duplicate(featData);\r\n                let featConsumeUpdate = duplicate(featConsume);\r\n\r\n                let maxUses = actorData.items.find(i => i.name===featConsumeName).data.data.uses.value;\r\n                baseHPTemp = baseHPTemp * Number(actorData.items.find(i => i.name===symbioticClassName).data.data.levels);\r\n                if (currentHPTemp == null || currentHPTemp == undefined)\r\n                    currentHPTemp = \"0\";\r\n                    \r\n                let content = `<p>Your current temporary HP is <strong>${currentHPTemp}</strong> and will be swaped to <strong>${baseHPTemp}</strong>.</p>\r\n                                <form>\r\n                                    <div class=\"form-group\">\r\n                                        <label>Flavor speech:</label>\r\n                                        <input id=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\r\n                                    </div>                    \r\n                                </form>\r\n                                <p><strong>You have ${maxUses} uses remaining before resting.</strong></p>\r\n                                `;\r\n                new Dialog({\r\n                    title: `Activating ${featName}`,\r\n                    content: content,      \r\n                    buttons: {     \r\n                        one: {\r\n                            icon: '<i class=\"fas fa-check\"></i>',\r\n                            label: \"Use\",\r\n                            callback: (html) =>               \r\n                            {\r\n                                //button function\r\n\r\n                                let chatMsg = `\r\n                                <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\">\r\n                                    <header class=\"card-header flexrow\">\r\n                                        <img src=\"${featUpdate.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                                        <h3 class=\"item-name\">\r\n                                        ${featName}</h3>\r\n                                    </header>\r\n                                    <div class=\"card-content\">\r\n                                        <p>${actorData.name} is entering in Symbiotic state! ${featName}.</p>\r\n                                        <p><strong>${html.find('#flavor')[0].value}</strong></p>\r\n                                        <details closed=\"\">\r\n                                        <summary>Toggle description</summary>\r\n                                        ${featUpdate.data.description.value}\r\n                                        </details>\r\n                                    </div>\r\n                                </div>\r\n                                `;                                           \r\n\r\n                                toChat(chatMsg);\r\n\r\n                                //update actor data\r\n                                let tempHPUpdate = actorData;\r\n                                tempHPUpdate.data.data.attributes.hp.temp = baseHPTemp;\r\n                                actorData.updateEmbeddedEntity(\"OwnedItem\", tempHPUpdate);          \r\n                                featConsumeUpdate.data.uses.value = featConsumeUpdate.data.uses.value - 1;\r\n                                actorData.updateEmbeddedEntity(\"OwnedItem\", featConsumeUpdate);\r\n                                featUpdate.data.chatFlavor = html.find('#flavor')[0].value;\r\n                                actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n\r\n                                confirmed = true;\r\n\r\n                                //update global melee weapon attack bonus damage\r\n                                let obj = {};\r\n                                obj['flags.symbioticMacro.enabled'] = true;\r\n                                obj['flags.symbioticMacro.symbioticDmgAdded'] = true;\r\n                                // Preserve old mwak damage bonus if there was one\r\n                                obj['flags.symbioticMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n                                //actually add the mwak bonus to the previous bonus\r\n                                if (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\r\n                                    obj['data.bonuses.mwak.damage'] = symbioticDmg;\r\n                                } else {\r\n                                    obj['data.bonuses.mwak.damage'] = `${dmg} + ${symbioticDmg}`;\r\n                                }\r\n                                actorData.update(obj);\r\n                                //update halo of spores damage\r\n                                dmg2 = featSecondaryEffectUpdate.data.damage.parts[0][0];\r\n                                featSecondaryEffectUpdate.data.damage.parts[0][0] = dmg2.replace(\"1d\", symbioticDmg2);\r\n                                actorData.updateEmbeddedEntity(\"OwnedItem\", featSecondaryEffectUpdate);\r\n                            }\r\n                        },\r\n                        two: {\r\n                            icon: '<i class=\"fas fa-times\"></i>',\r\n                            label: \"Cancel\"\r\n                        }  \r\n                    },\r\n                    default: \"Cancel\",\r\n                    close: html => {\r\n                        if (confirmed) {\r\n                            if (effectsOn) {\r\n                                //add effects filter template with Tokenmagic module                       \r\n                                let params = \r\n                                [{\r\n                                    filterType: \"bevel\",\r\n                                    rotation: 0,\r\n                                    thickness: 4,\r\n                                    lightColor: 0x00FF00,\r\n                                    lightAlpha: 0.7,\r\n                                    shadowColor: 0xFF0000,\r\n                                    shadowAlpha: 0.4,\r\n                                    animated :\r\n                                    {\r\n                                    rotation: \r\n                                    { \r\n                                        active: true,\r\n                                        clockWise: true, \r\n                                        loopDuration: 5000, \r\n                                        animType: \"rotation\", \r\n                                    }\r\n                                    }\r\n                                }];                       \r\n                                TokenMagic.addFiltersOnSelected(params);\r\n                            } else {\r\n                                //add icon to token\r\n                                if (!actorTokenData.data.effects.includes(noEffectsIcon)) {\r\n                                  actorTokenData.toggleEffect(noEffectsIcon);\r\n                                }\r\n                            }  \r\n                        }\r\n                    }\r\n                }).render(true);  \r\n            } else\r\n                ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);                \r\n        }          \r\n    } else\r\n        ui.notifications.warn(`Selected character must be a ${symbioticClassName} that have ${featName}, ${featConsumeName} and ${featSecondaryEffectName} features.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/green_22.jpg","actorIds":[],"_id":"SopwzctWokg6CZGh"}
{"name":"Bard: Bardic Inspiration v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Use Bardic Inspiration and apply effects\r\n//Select the bard then one target, it will automatically check for colleges and list appropriate Bardic Inpiration related skills\r\n\r\nlet confirmed = false;\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\n\r\n//edit if required, must be equal to character sheet\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nfunction bardSubclasses(subclassName,subclassTarget,subclassBardicDie,subclassPsychicBladesDie) {\r\n    return [\r\n        {source: \"Bard\", feat: \"Bardic Inspiration\", featlevel: 1, die: `${subclassBardicDie}`, roll: false, flavor: `${subclassTarget} was deeply inspires by ${subclassName}! Now it can use an Inspiration Bardic Die to increase one of the following:<br>- Ability Check<br>- Attack Roll<br>- Saving Throw`},\r\n        {source: \"College of Eloquence\", feat: \"Unsettling Words\", featlevel: 3, die: `${subclassBardicDie}`, roll: true, flavor: `${subclassName} uses Unsettling Words to cause doubt on ${subclassTarget}.`},\r\n        {source: \"College of Glamour\", feat: \"Mantle of Inspiration\", featlevel: 3, die: ``, roll: false, flavor: `${subclassName} uses Mantle of Inspiration to grant itself a wondrous appearance.`},\r\n        {source: \"College of Lore\", feat: \"Cutting Words\", featlevel: 3, die: `${subclassBardicDie}`, roll: true, flavor: `${subclassName} uses Cutting Words to sap the confidence from ${subclassTarget}.`},\r\n        {source: \"College of Lore\", feat: \"Peerless Skill\", featlevel: 14, die: `${subclassBardicDie}`, roll: true, flavor: `${subclassName} uses Peerless Skill to increases its confidence.`},\r\n        {source: \"College of Swords\", feat: \"Blade Flourish\", featlevel: 3, die: `${subclassBardicDie}`, roll: true, flavor: `${subclassName} uses Blade Flourish to improve your own combat prowess.`},\r\n        {source: \"College of Valor\", feat: \"Combat Inspiration\", featlevel: 3, die: `${subclassBardicDie}`, roll: false, flavor: `${subclassTarget} receives Combat Inspiration from ${subclassName} increasing its combat prowess! Now it can use an Inspiration Bardic Die to increase one of the following:<br>- Attack Damage<br>- Armor Class when attacked<br>- Ability Check<br>- Attack Roll<br>- Saving Throw`},\r\n        {source: \"College of Whispers\", feat: \"Psychic Blades\", featlevel: 3, die: `${subclassPsychicBladesDie}`, roll: true, flavor: `${subclassName} uses Psychic Blades to imbue its weapon with power to magically intoxicate the mind of ${subclassTarget}.`}\r\n    ];\r\n}\r\n\r\nlet bardClassName = bardSubclasses()[0].source;\r\nlet featName = bardSubclasses()[0].feat;\r\n\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n        user: game.user._id,\r\n        speaker: ChatMessage.getSpeaker(),\r\n        content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n\r\nfunction confirmUse(featSelectedName,actorData,featData,featBard) {\r\n\r\n    let featSelectedData = duplicate(actorData.items.find(i => i.name===featSelectedName));\r\n    let featUpdate = duplicate(featData);\r\n\r\n    let content = `\r\n    <p>\r\n        <div class=\"form-group\">\r\n            <label>Flavor speech:</label>\r\n            <input id=\"flavor\" value=\"${featSelectedData.data.chatFlavor}\"></input>\r\n            <p>Input some extra flavor for your ${featSelectedName}!</p>\r\n        </div>\r\n    </p>\r\n    `;\r\n\r\n    new Dialog({\r\n        title: `Using ${featSelectedName}`,\r\n        content: content,\r\n        buttons: {     \r\n            one: {\r\n                icon: '<i class=\"fas fa-music\"></i>',\r\n                label: \"Do the thing!\",\r\n                callback: (html) =>               \r\n                {                              \r\n                    //button function\r\n                    let bardicDieBonus = featBard.find(i => i.feat == featSelectedName).die;\r\n                    let bardicDieText = \"\";\r\n                    if (bardicDieBonus !== \"\")\r\n                        bardicDieText = `<p>Bonus from Bardic Inspiration is ${bardicDieBonus}</p>`;\r\n\r\n                    let chatMsg = `\r\n                    <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\">\r\n                        <header class=\"card-header flexrow\">\r\n                            <img src=\"${featSelectedData.img}\" title=\"${featSelectedData.name}\" width=\"36\" height=\"36\"/>\r\n                            <h3 class=\"item-name\">\r\n                            ${featSelectedData.name}</h3>\r\n                        </header>\r\n                        <div class=\"card-content\">\r\n                            <strong>${html.find('#flavor')[0].value}</strong>\r\n                            ${bardicDieText}\r\n                            <p>${featBard.find(i => i.feat == featSelectedName).flavor}</p>\r\n                            <details closed=\"\">\r\n                                <summary>Toggle description</summary>\r\n                                ${featSelectedData.data.description.value}\r\n                            </details>\r\n                        </div>\r\n                    </div>\r\n                    `;                                              \r\n\r\n                    if (featBard.find(i => i.feat == featSelectedName).roll) {\r\n                        new Roll(`${bardicDieBonus}`).roll().toMessage({\r\n                            speaker: ChatMessage.getSpeaker(),\r\n                            flavor: chatMsg});                        \r\n                    } else {\r\n                        ChatMessage.create({\r\n                            speaker: ChatMessage.getSpeaker(),\r\n                            content: chatMsg\r\n                        });\r\n                    }\r\n\r\n\r\n                    //update actor data\r\n                    featUpdate.data.uses.value = featUpdate.data.uses.value - 1;\r\n                    actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n                    featSelectedData.data.chatFlavor = html.find('#flavor')[0].value;\r\n                    actorData.updateEmbeddedEntity(\"OwnedItem\", featSelectedData);\r\n\r\n                    if (effectsOn) {\r\n                        //add effects filter template with Tokenmagic module\r\n                        let params =\r\n                        [{\r\n                            filterType: \"zoomblur\",\r\n                            autoDestroy: true,\r\n                            strength: 0.3,\r\n                            innerRadiusPercent: 70,\r\n                            radiusPercent: 120,\r\n                            padding: 30,\r\n                            animated:\r\n                            {\r\n                                innerRadiusPercent: \r\n                                { \r\n                                active: true, \r\n                                animType: \"sinOscillation\", \r\n                                loopDuration: 500, \r\n                                val1: 65, \r\n                                val2: 75,\r\n                                loops: 11\r\n                                }\r\n                            }\r\n                        },\r\n                        {\r\n                            filterType: \"glow\",\r\n                            autoDestroy: true,\r\n                            distance: 10,\r\n                            outerStrength: 8,\r\n                            innerStrength: 0,\r\n                            color: 0xFFFFFF,\r\n                            quality: 0.5,\r\n                            padding: 10,\r\n                            animated:\r\n                            {\r\n                                color: \r\n                                {\r\n                                active: true, \r\n                                loopDuration: 2770, \r\n                                animType: \"colorOscillation\", \r\n                                val1:0xFFFFFF, \r\n                                val2:0xFFDF00,\r\n                                loops: 2\r\n                                }\r\n                            }    \r\n                        }];                         \r\n                        TokenMagic.addFiltersOnSelected(params);\r\n                    }   \r\n\r\n                }\r\n            },\r\n            two: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: \"Cancel\"\r\n            }  \r\n        },\r\n        default: \"Cancel\"\r\n    }).render(true);   \r\n\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n    let featClass = actorData ? actorData.items.find(i => i.name===bardClassName) : null;\r\n    if (featData !== null && featClass !== null) { //if have the required class and feature\r\n        if (game.user.targets.size == 1) { //if have one target\r\n            if(featData.data.data.uses.value > 0) { //check if there are uses available              \r\n\r\n                let bardLevel = featClass.data.data.levels;\r\n                let bardSubclass = featClass.data.data.subclass;\r\n                let maxUses = featData.data.data.uses.value;\r\n                let targetActor = game.user.targets.values().next().value.actor;\r\n\r\n                let bardicDie = \"1d6\";\r\n                let psychicBladesDie = \"2d6\";\r\n                if (bardLevel >= 15) {\r\n                    bardicDie = \"1d12\";\r\n                    psychicBladesDie = \"8d6\";\r\n                } else if (bardLevel >= 10) {\r\n                    bardicDie = \"1d10\";\r\n                    psychicBladesDie = \"5d6\";\r\n                } else if (bardLevel >= 5) {\r\n                    bardicDie = \"1d8\";\r\n                    psychicBladesDie = \"3d6\";\r\n                }\r\n\r\n                let featBard = bardSubclasses(actorData.name,targetActor.data.name,bardicDie,psychicBladesDie).filter(i => (i.source == bardClassName || i.source == bardSubclass) && i.featlevel <= bardLevel);\r\n                \r\n                let content = `<form><div class=\"form-group\">\r\n                                <label>Inspiration feature:</label>\r\n                                <select id=\"feature-name\">`;\r\n                featBard.forEach(feats => {\r\n                    content += `<option value=\"${feats.feat}\">${feats.feat}</option>`;\r\n                });\r\n                \r\n                content += `</select></div></form>\r\n                            <p><strong>You have ${maxUses} uses remaining before resting.</strong></p>`;\r\n\r\n                new Dialog({\r\n                    title: `${featName}`,\r\n                    content: content,      \r\n                    buttons: {     \r\n                        one: {\r\n                            icon: '<i class=\"fas fa-check\"></i>',\r\n                            label: \"Continue\",\r\n                            callback: (html) =>               \r\n                            {                              \r\n                                confirmed = true;\r\n                            }\r\n                        },\r\n                        two: {\r\n                            icon: '<i class=\"fas fa-times\"></i>',\r\n                            label: \"Cancel\"\r\n                        }  \r\n                    },\r\n                    default: \"Cancel\",\r\n                    close: html => {\r\n                        if (confirmed) {\r\n                            confirmUse(html.find('#feature-name')[0].value,actorData,featData,featBard);\r\n                        }\r\n                    }\r\n                }).render(true);            \r\n            } else\r\n                ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);\r\n        } else if (game.user.targets.size > 1)\r\n            ui.notifications.warn(`Target only one token.`);\r\n        else\r\n            ui.notifications.warn(`Target one token. Double right-click if you're a player or single right-click then select target if you're GM. If the feature is centered on you and have more than one target, target yourself.`);\r\n    } else\r\n        ui.notifications.warn(`Selected character must be a ${bardClassName} and have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/yellow_08.jpg","actorIds":[],"_id":"WZLH5iNrPqhx3ULc"}
{"name":"General: Delete templates v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Delete owned or all templates in the current scene\r\n\r\nfunction confirmDelete() {\r\n    if (game.user.isGM === true) {\r\n        new Dialog({\r\n            title: \"Delete templates\",\r\n            content: `\r\n            <p>Are you sure you want to clear all templates?</p>       \r\n            `,\r\n            buttons: {\r\n            one: {\r\n                icon: '<i class=\"fas fa-eraser\"></i>',\r\n                label: \"Yes\",\r\n                callback: (html) =>\r\n                {\r\n                    //Delete all templates\r\n                    canvas.templates.deleteMany(canvas.templates.placeables.map(o =>o.id),{});\r\n                }\r\n            },\r\n            two: {\r\n                icon: '<i class=\"fas fa-times\"></i>',\r\n                label: \"Cancel\"\r\n            }                \r\n            },\r\n            default: \"Cancel\"\r\n        }).render(true);\r\n    } else {\r\n        return ui.notifications.error(`This option is available only for users with GM permissions.`);\r\n    }\r\n}\r\n\r\nnew Dialog({\r\n    title: \"Delete templates\",\r\n    content: `\r\n    <p>Which templates do you want do clear?</p>       \r\n    `,\r\n    buttons: {\r\n    one: {\r\n        icon: '<i class=\"fas fa-user\"></i>',\r\n        label: \"My templates\",\r\n        callback: (html) =>\r\n        {\r\n            //Delete only user templates\r\n            canvas.templates.deleteMany(canvas.templates.placeables.filter(i =>i.data.user == game.user.id).map(o =>o.id),{});\r\n        }\r\n    },\r\n    two: {\r\n        icon: '<i class=\"fas fa-eraser\"></i>',\r\n        label: \"GM only: All\",\r\n        callback: (html) =>\r\n        {\r\n            confirmDelete();\r\n        }\r\n    },\r\n    three: {\r\n        icon: '<i class=\"fas fa-times\"></i>',\r\n        label: \"Cancel\"\r\n    }                \r\n    },\r\n    default: \"Cancel\"\r\n}).render(true);\r\n","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/spells/fog-air-1.jpg","actorIds":[],"_id":"XsnKOUqLbSqwpmru"}
{"name":"GM: Token Vision Configuration v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false},"exportSource":{"world":"teste","system":"dnd5e","coreVersion":"0.7.0","systemVersion":0.93}},"scope":"global","command":"//Configure token's vision and lighting settings.\r\n\r\nlet applyChanges = false;\r\nnew Dialog({\r\n  title: `Token Vision Configuration`,\r\n  content: `\r\n    <form>\r\n      <div class=\"form-group\">\r\n        <label>Vision Type:</label>\r\n        <select id=\"vision-type\" name=\"vision-type\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"dim0\">Self</option>\r\n          <option value=\"dim30\">Darkvision (30 ft)</option>\r\n          <option value=\"dim60\">Darkvision (60 ft)</option>\r\n          <option value=\"dim90\">Darkvision (90 ft)</option>\r\n          <option value=\"dim120\">Darkvision (120 ft)</option>\r\n          <option value=\"dim150\">Darkvision (150 ft)</option>\r\n          <option value=\"dim180\">Darkvision (180 ft)</option>\r\n          <option value=\"bright120\">Devil's Sight (Warlock)</option>\r\n        </select>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>Light Source:</label>\r\n        <select id=\"light-source\" name=\"light-source\">\r\n          <option value=\"nochange\">No Change</option>\r\n          <option value=\"none\">None</option>\r\n          <option value=\"candle\">Candle</option>\r\n          <option value=\"lamp\">Lamp</option>\r\n          <option value=\"bullseye\">Lantern (Bullseye)</option>\r\n          <option value=\"hooded-dim\">Lantern (Hooded - Dim)</option>\r\n          <option value=\"hooded-bright\">Lantern (Hooded - Bright)</option>\r\n          <option value=\"light\">Light (Cantrip)</option>\r\n          <option value=\"torch\">Torch</option>\r\n        </select>\r\n      </div>\r\n    </form>\r\n    `,\r\n  buttons: {\r\n    yes: {\r\n      icon: \"<i class='fas fa-check'></i>\",\r\n      label: `Apply Changes`,\r\n      callback: () => applyChanges = true\r\n    },\r\n    no: {\r\n      icon: \"<i class='fas fa-times'></i>\",\r\n      label: `Cancel Changes`\r\n    },\r\n  },\r\n  default: \"yes\",\r\n  close: html => {\r\n    if (applyChanges) {\r\n      for ( let token of canvas.tokens.controlled ) {\r\n        let visionType = html.find('[name=\"vision-type\"]')[0].value || \"none\";\r\n        let lightSource = html.find('[name=\"light-source\"]')[0].value || \"none\";\r\n        let dimSight = 0;\r\n        let brightSight = 0;\r\n        let dimLight = 0;\r\n        let brightLight = 0;\r\n        let lightAngle = 360;\r\n        let lockRotation = token.data.lockRotation;\r\n        // Get Vision Type Values\r\n        switch (visionType) {\r\n          case \"dim0\":\r\n            dimSight = 0;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim30\":\r\n            dimSight = 30;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim60\":\r\n            dimSight = 60;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim90\":\r\n            dimSight = 90;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim120\":\r\n            dimSight = 120;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim150\":\r\n            dimSight = 150;\r\n            brightSight = 0;\r\n            break;\r\n          case \"dim180\":\r\n            dimSight = 180;\r\n            brightSight = 0;\r\n            break;\r\n          case \"bright120\":\r\n            dimSight = 0;\r\n            brightSight= 120;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimSight = token.data.dimSight;\r\n            brightSight = token.data.brightSight;\r\n        }\r\n        // Get Light Source Values\r\n        switch (lightSource) {\r\n          case \"none\":\r\n            dimLight = 0;\r\n            brightLight = 0;\r\n            break;\r\n          case \"candle\":\r\n            dimLight = 10;\r\n            brightLight = 5;\r\n            break;\r\n          case \"lamp\":\r\n            dimLight = 45;\r\n            brightLight = 15;\r\n            break;\r\n          case \"bullseye\":\r\n            dimLight = 120;\r\n            brightLight = 60;\r\n            lockRotation = false;\r\n            lightAngle = 52.5;\r\n            break;\r\n          case \"hooded-dim\":\r\n            dimLight = 5;\r\n            brightLight = 0;\r\n            break;\r\n          case \"hooded-bright\":\r\n            dimLight = 60;\r\n            brightLight = 30;\r\n            break;\r\n          case \"light\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"torch\":\r\n            dimLight = 40;\r\n            brightLight = 20;\r\n            break;\r\n          case \"nochange\":\r\n          default:\r\n            dimLight = token.data.dimLight;\r\n            brightLight = token.data.brightLight;\r\n            lightAngle = token.data.lightAngle;\r\n            lockRotation = token.data.lockRotation;\r\n        }\r\n        // Update Token\r\n        console.log(token);\r\n        token.update({\r\n          vision: true,\r\n          dimSight: dimSight,\r\n          brightSight: brightSight,\r\n          dimLight: dimLight,\r\n          brightLight:  brightLight,\r\n          lightAngle: lightAngle,\r\n          lockRotation: lockRotation\r\n        });\r\n      }\r\n    }\r\n  }\r\n}).render(true);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/red_09.jpg","actorIds":[],"_id":"ZSABI2yb0ACzAxkw"}
{"name":"General: Set Global Modifiers v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Set Global Modifiers for an Actor\r\n\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n  actorData = actorData[0].actor;\r\n\r\n  function updateGlobalModifiers(mwakA,mwakD,rwakA,rwakD,msakA,msakD,rsakA,rsakD,gac,gst,gsc,gsdc)\r\n  { \r\n          let obj = {};\r\n\r\n          obj[\"data.bonuses.mwak.attack\"] = mwakA;\r\n          obj[\"data.bonuses.mwak.damage\"] = mwakD;\r\n          obj[\"data.bonuses.rwak.attack\"] = rwakA;\r\n          obj[\"data.bonuses.rwak.damage\"] = rwakD;\r\n          obj[\"data.bonuses.msak.attack\"] = msakA;\r\n          obj[\"data.bonuses.msak.damage\"] = msakD;\r\n          obj[\"data.bonuses.rsak.attack\"] = rsakA;\r\n          obj[\"data.bonuses.rsak.damage\"] = rsakD;\r\n          obj[\"data.bonuses.abilities.check\"] = gac;\r\n          obj[\"data.bonuses.abilities.save\"] = gst;\r\n          obj[\"data.bonuses.abilities.skill\"] = gsc;\r\n          obj[\"data.bonuses.spell.dc\"] = gsdc;\r\n\r\n      \r\n          actorData.update(obj);\r\n  }\r\n\r\n  function clearAll()\r\n  {\r\n      new Dialog({\r\n          title: \"Clear All\",\r\n          content: `<p>Are you sure you want to clear all modifiers from selected token?</p>`,\r\n          buttons: {\r\n            one: {\r\n              icon: '<i class=\"fas fa-eraser\"></i>',\r\n              label: \"Clear All\",\r\n              callback: (html) =>\r\n              {\r\n                  updateGlobalModifiers('','','','','','','','','','','','');\r\n              }\r\n            },\r\n            two: {\r\n              icon: '<i class=\"fas fa-times\"></i>',\r\n              label: \"Cancel\"\r\n            }\r\n          },\r\n          default: \"Cancel\"\r\n      }).render(true);        \r\n  }\r\n\r\n  new Dialog({\r\n    title: \"Global Modifiers\",\r\n    content: `\r\n    <p>Change values to update global modifiers</p>\r\n    <form>\r\n      <div class=\"form-group\">\r\n      <label>Melee Weapon Atk:</label>\r\n      <input type=\"text\" id=\"mwakA\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.mwak.attack)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Melee Weapon Dmg:</label>\r\n      <input type=\"text\" id=\"mwakD\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.mwak.damage)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Ranged Weapon Atk:</label>\r\n      <input type=\"text\" id=\"rwakA\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.rwak.attack)) + `\">\r\n      </div>            \r\n      <div class=\"form-group\">\r\n      <label>Ranged Weapon Dmg:</label>\r\n      <input type=\"text\" id=\"rwakD\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.rwak.damage)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Melee Spell Atk:</label>\r\n      <input type=\"text\" id=\"msakA\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.msak.attack)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Melee Spell Dmg:</label>\r\n      <input type=\"text\" id=\"msakD\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.msak.damage)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Ranged Spell Atk:</label>\r\n      <input type=\"text\" id=\"rsakA\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.rsak.attack)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Ranged Spell Dmg:</label>\r\n      <input type=\"text\" id=\"rsakD\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.rsak.damage)) + `\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n      <label>Ability Check:</label>\r\n      <input type=\"text\" id=\"gac\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.abilities.check)) + `\">\r\n      </div>     \r\n      <div class=\"form-group\">\r\n      <label>Saving Throw:</label>\r\n      <input type=\"text\" id=\"gst\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.abilities.save)) + `\">\r\n      </div>     \r\n      <div class=\"form-group\">\r\n      <label>Skill Check:</label>\r\n      <input type=\"text\" id=\"gsc\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.abilities.skill)) + `\">\r\n      </div>     \r\n      <div class=\"form-group\">\r\n      <label>Spell DC:</label>\r\n      <input type=\"text\" id=\"gsdc\" value=\"` + JSON.parse(JSON.stringify(actorData.data.data.bonuses.spell.dc)) + `\">\r\n      </div>                                                           \r\n    </form>\r\n    `,\r\n    buttons: {\r\n      one: {\r\n        icon: '<i class=\"fas fa-check\"></i>',\r\n        label: \"Confirm\",\r\n        callback: (html) =>\r\n        {\r\n            updateGlobalModifiers(\r\n                html.find('[id=mwakA]')[0].value,\r\n                html.find('[id=mwakD]')[0].value,\r\n                html.find('[id=rwakA]')[0].value,\r\n                html.find('[id=rwakD]')[0].value,\r\n                html.find('[id=msakA]')[0].value,\r\n                html.find('[id=msakD]')[0].value,\r\n                html.find('[id=rsakA]')[0].value,\r\n                html.find('[id=rsakD]')[0].value,\r\n                html.find('[id=gac]')[0].value,\r\n                html.find('[id=gst]')[0].value,\r\n                html.find('[id=gsc]')[0].value,\r\n                html.find('[id=gsdc]')[0].value\r\n            );\r\n        }\r\n      },\r\n      two: {\r\n        icon: '<i class=\"fas fa-eraser\"></i>',\r\n        label: \"Clear All\",\r\n        callback: (html) =>\r\n        {\r\n            clearAll();\r\n        }          \r\n      },\r\n      three: {\r\n        icon: '<i class=\"fas fa-times\"></i>',\r\n        label: \"Cancel\"\r\n      }\r\n    },\r\n    default: \"Cancel\"\r\n  }).render(true);\r\n} else if (actorData.length > 1)\r\n  ui.notifications.warn(`Select only one token.`);\r\nelse\r\n  ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/items/inventory/dice.jpg","actorIds":[],"_id":"ZSHeD9DkI7NH4aJM"}
{"name":"General: Whisper Players v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Provides a dialog to whisper specific players. If you have tokens selected, it will automatically default to try and whisper those players.\r\n\r\n\r\nlet applyChanges = false;\r\n\r\nlet users = game.users.filter(user => user.active && user.id !== game.user.id);\r\nlet checkOptions = \"\"\r\nlet playerTokenIds = users.map(u => u.character?.id).filter(id => id !== undefined);\r\nlet selectedPlayerIds = canvas.tokens.controlled.map(token => {\r\n  if (playerTokenIds.includes(token.actor.id)) return token.actor.id;\r\n});\r\n\r\n// Build checkbox list for all active players\r\nusers.forEach(user => {\r\n    let checked = !!user.character && selectedPlayerIds.includes(user.character.id) && 'checked';\r\n\r\n    checkOptions+=`\r\n        <br>\r\n        <input type=\"checkbox\" name=\"${user.id}\" value=\"${user.name}\" ${checked}>\\n\r\n        <label for=\"${user.id}\">${user.name}</label>\r\n    `;\r\n});\r\n\r\nnew Dialog({\r\n  title:\"Whisper\",\r\n  content:`Whisper To: ${checkOptions} <br>\r\n    <label for=\"message\">Message:</label>\r\n    <textarea id=\"message\" name=\"message\" rows=\"4\" cols=\"50\"></textarea><br>`,\r\n  buttons:{\r\n    whisper:{   \r\n      label:\"Whisper\",\r\n      callback: (html) => createMessage(html)\r\n    }\r\n  }\r\n}).render(true);\r\n\r\nfunction createMessage(html) {\r\n  var targets = [];\r\n  // build list of selected players ids for whispers target\r\n  for ( let user of users ) {\r\n    if (html.find('[name=\"'+user.id+'\"]')[0].checked){\r\n      targets.push(user.id);\r\n    }\r\n    var messageText = '<p style=\"color:purple\">';\r\n    messageText += html.find('[name=\"message\"]')[0].value;\r\n    messageText += '</p>';\r\n  }\r\n\r\n    if (targets.length > 0) {\r\n        ChatMessage.create({\r\n            content: messageText,\r\n            whisper: targets\r\n        });\r\n    } else {\r\n        return ui.notifications.error(`You must select a target to your private message.`)\r\n    }\r\n}","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/light_07.jpg","actorIds":[],"_id":"diMzeQ5sf07JDCZP"}
{"name":"General: Roll skill v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Roll Skill check for an Actor\r\n\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    new Dialog({\r\n        title: \"Select Skill\",\r\n        content: getCheckTemplate(),\r\n        buttons: {\r\n        one: {\r\n            icon: '<i class=\"fas fa-check\"></i>',\r\n            label: \"Confirm\",\r\n            callback: (html) =>\r\n            {\r\n                const sourceSkillName = html.find(\"#skillName\")[0].value;\r\n                actorData.rollSkill(sourceSkillName);\r\n            }\r\n        },\r\n        two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancel\",\r\n        }\r\n        },\r\n        default: \"Cancel\"\r\n    }).render(true);\r\n    \r\n    function getCheckTemplate() {\r\n        let objects = new Object();\r\n        objects = game.dnd5e.config.skills;\r\n\r\n        let template = `\r\n        <form>\r\n            <div class=\"form-group\">\r\n                <label>Skill:</label>\r\n                <select id=\"skillName\">`\r\n        \r\n                for (let [checkId, check] of Object.entries(objects)) {\r\n                    template += `<option value=\"${checkId}\">${check}</option>`;    \r\n                }            \r\n        \r\n        template += `</select>\r\n            </div>\r\n        </form>`;\r\n\r\n        return template;\r\n    }\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/mech_8.jpg","actorIds":[],"_id":"iuP13VoyaYhgpXb5"}
{"name":"GM: Set NPC tokens v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":true},"exportSource":{"world":"teste","system":"dnd5e","coreVersion":"0.6.5","systemVersion":0.93}},"scope":"global","command":"//This will set npc tokens in scene to display their token bars and nameplate only for GM, and sets the first bar to represent HP and removes the second token bar.\r\n\r\nif (canvas.tokens.placeables.filter(token => token.actor !== null).length >0) {\r\n    const tokens =canvas.tokens.placeables.filter(token => token.actor.isToken).map(token => {\r\n    return {\r\n        _id: token.id,\r\n        \"bar1.attribute\": \"attributes.hp\",\r\n        \"bar2.attribute\": \"\",\r\n        \"displayName\": CONST.TOKEN_DISPLAY_MODES.OWNER,\r\n        \"displayBars\": CONST.TOKEN_DISPLAY_MODES.OWNER\r\n    };\r\n    });\r\n\r\n    canvas.scene.updateEmbeddedEntity('Token', tokens);\r\n} else ui.notifications.warn(`The scene doesn't have any actor.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/yellow_25.jpg","actorIds":[],"_id":"jbS3Dg5Cx7Sf9jT0"}
{"name":"Barbarian: Rage v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Apply Rage feature to selected character.\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\nconst noEffectsIcon = 'icons/svg/explosion.svg';\r\n\r\n//must match values in character sheet (if present)\r\nconst rageClassName = 'Barbarian';\r\nlet featName = \"Rage\";\r\n//item name for Bear Totem\r\nconst bearTotemFeatureName = 'Totem Spirit: Bear';\r\n//rageMsg will be used if flavor is empty\r\nconst rageMsg = 'Eyes shining, blood pumping, targets defined! The meat grinder is prepared to scream!'\r\n//change if your barbarian does not use Strength\r\nconst strAttacks = true;\r\n\r\n//declarations\r\nlet rageDmgAdded = false;\r\nlet enabled = false;\r\nlet confirmed = false;\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nfunction toChat(endMsg) {\r\n  let chatData = {\r\n    user: game.user._id,\r\n    speaker: ChatMessage.getSpeaker(),\r\n    content: endMsg\r\n  };\r\n  ChatMessage.create(chatData, {});\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n  let actorTokenData = actorData[0];\r\n  actorData = actorData[0].actor;   \r\n  let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n  let featClass = actorData ? actorData.items.find(i => i.name===rageClassName) : null;\r\n  if (featData !== null && featClass !== null) { //if have the required class and feature\r\n\r\n    //verify if rage and its damage bonus are active\r\n    if (actorData.data.flags.rageMacro !== null && actorData.data.flags.rageMacro !== undefined) {    \r\n            enabled = true;\r\n            if (actorData.data.flags.rageMacro[\"rageDmgAdded\"] == true) {\r\n                rageDmgAdded = true;\r\n            }\r\n    }\r\n\r\n    //calculate rage damage\r\n    let barblvl = featClass.data.data.levels;\r\n    let lvlCorrection =  barblvl === 16 || barblvl === 17 ? 1 : 0;\r\n    let rageDmg = 2 + Math.floor(barblvl / 9) + lvlCorrection;\r\n    let dmg = JSON.parse(JSON.stringify(actorData.data.data.bonuses.mwak.damage));\r\n    \r\n    if (enabled) {\r\n      //if rage is active, disable it\r\n      // reset resistances and melee weapon attack bonus\r\n      let obj = {};\r\n      obj['flags.rageMacro'] = null;\r\n            obj['data.traits.dr'] = actorData.data.flags.rageMacro.oldResistances;                    \r\n      //revert rage global mwak damage bonus to original value\r\n      if(rageDmgAdded) {\r\n        if (dmg == rageDmg || dmg == null || dmg == undefined || dmg == '' || dmg == 0){\r\n          obj['data.bonuses.mwak.damage']='';\r\n        } else {\r\n          let patt = `\\\\s\\\\+\\\\s${rageDmg}($|[^0123456789dkrxcm(@{])`;\r\n          let result = dmg.search(patt);\r\n          if (result !== -1) {\r\n            let len = ('' + rageDmg).length;\r\n            let origDmg = duplicate(dmg);\r\n            let firstHalfDmg = duplicate(dmg).substring(0,result);\r\n            let lastHalfDmg = duplicate(dmg).substring(result+3+len, origDmg.length);\r\n            dmg = `${firstHalfDmg}${lastHalfDmg}`;\r\n            obj['data.bonuses.mwak.damage']=dmg;\r\n          } else {\r\n            ui.notifications.error(`Failed to revert global melee weapon attack bonus, please revert manually.`);\r\n          }\r\n        }\r\n      }\r\n      actorData.update(obj);\r\n\r\n      if (effectsOn) {\r\n        //delete all filters on the selected tokens/tiles\r\n        TokenMagic.deleteFiltersOnSelected();\r\n      } else {\r\n        //remove icon from token\r\n        if (actorTokenData.data.effects.includes(noEffectsIcon)) {\r\n          actorTokenData.toggleEffect(noEffectsIcon);\r\n        }\r\n      }\r\n      \r\n      let chatMsg = `<div class=\"dnd5e chat-card item-card\"\">${actorData.name} is no longer raging.</div>`;\r\n      toChat(chatMsg);\r\n\r\n    } else {\r\n      if(featData.data.data.uses.value > 0) { //check if there are uses available\r\n        //if rage is not active, enable it\r\n        let featUpdate = duplicate(featData);\r\n        new Dialog({\r\n        title: `Activating ${featName}`,\r\n        content:`\r\n        <label>Uses left: ${featData.data.data.uses.value}</label>\r\n        <form>\r\n            <div class=\"form-group\">\r\n                <label for=\"flavor\">Flavor speech:</label>\r\n                <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\r\n            </div>\r\n        </form>\r\n        `,\r\n        buttons: {\r\n        one: {\r\n            icon: '<i class=\"fas fa-fist-raised\"></i>',\r\n            label: \"Activate\",\r\n            callback: (html) =>\r\n            {\r\n                let rageFlavor = html.find('#flavor')[0].value;\r\n                featUpdate.data.chatFlavor = rageFlavor;\r\n                featUpdate.data.uses.value = featUpdate.data.uses.value - 1;\r\n                actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n                confirmed = true;\r\n\r\n                //update resistance\r\n                let obj = {};\r\n                //storing old resistances in flags to restore later\r\n                obj['flags.rageMacro.enabled'] = true;\r\n                obj['flags.rageMacro.oldResistances'] = JSON.parse(JSON.stringify(actorData.data.data.traits.dr));\r\n                //add bludgeoning, piercing and slashing resistance\r\n                let newResistance = duplicate(actorData.data.data.traits.dr);\r\n                if (newResistance.value.indexOf('bludgeoning') === -1) newResistance.value.push('bludgeoning');\r\n                if (newResistance.value.indexOf('piercing') === -1) newResistance.value.push('piercing');\r\n                if (newResistance.value.indexOf('slashing') === -1) newResistance.value.push('slashing');\r\n                //if bear totem, add bear totem resistances.\r\n                let bear = actorData.items.find(i => i.name === `${bearTotemFeatureName}`)\r\n                if (bear !== undefined && bear!== null) {\r\n                if (newResistance.value.indexOf('acid') === -1) newResistance.value.push('acid');\r\n                if (newResistance.value.indexOf('cold') === -1) newResistance.value.push('cold');\r\n                if (newResistance.value.indexOf('fire') === -1) newResistance.value.push('fire');\r\n                if (newResistance.value.indexOf('force') === -1) newResistance.value.push('force');\r\n                if (newResistance.value.indexOf('lightning') === -1) newResistance.value.push('lightning');\r\n                if (newResistance.value.indexOf('necrotic') === -1) newResistance.value.push('necrotic');\r\n                if (newResistance.value.indexOf('poison') === -1) newResistance.value.push('poison');\r\n                if (newResistance.value.indexOf('radiant') === -1) newResistance.value.push('radiant');\r\n                if (newResistance.value.indexOf('thunder') === -1) newResistance.value.push('thunder');\r\n                }\r\n                obj['data.traits.dr'] = newResistance;\r\n                actorData.update(obj);\r\n\r\n                //for strength barbarians, update global melee weapon attack bonus to include rage bonus\r\n                if (strAttacks) {\r\n                  obj['flags.rageMacro.rageDmgAdded'] = true;\r\n                  // Preserve old mwak damage bonus if there was one\r\n                  obj['flags.rageMacro.oldDmg'] = JSON.parse(JSON.stringify(dmg));\r\n                  //actually add the bonus rage damage to the previous bonus damage\r\n                  if (dmg == null || dmg == undefined || dmg == 0 || dmg == '') {\r\n                      obj['data.bonuses.mwak.damage'] = rageDmg;\r\n                  } else {\r\n                      obj['data.bonuses.mwak.damage'] = `${dmg} + ${rageDmg}`;\r\n                  }\r\n                  actorData.update(obj);\r\n                }\r\n\r\n                //building chat message\r\n                let rageFlavorMsg = \"\";\r\n                if (rageFlavor !== undefined && rageFlavor !== null && rageFlavor !== \"\") {\r\n                    rageFlavorMsg = `<p><strong>${rageFlavor}</strong></p>`;\r\n                } else {\r\n                    rageFlavorMsg = `<p><strong>${rageMsg}</strong></p>`;\r\n                }\r\n\r\n                let chatMsg = `\r\n                <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\" data-spell-level=\"${featData.data.data.level}\">\r\n                  <header class=\"card-header flexrow\">\r\n                      <img src=\"${featUpdate.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                      <h3 class=\"item-name\">\r\n                      ${featName}</h3>\r\n                  </header>\r\n                  <div class=\"card-content\">\r\n                      <p>${actorData.name} enters in ${featName} mode</p>\r\n                      ${rageFlavorMsg}\r\n                      <details closed=\"\">\r\n                      <summary>Toggle description</summary>\r\n                      ${featUpdate.data.description.value} \r\n                      </details>                    \r\n                  </div>\r\n                </div>\r\n                `;\r\n               \r\n                toChat(chatMsg);\r\n            \r\n            }\r\n        },\r\n        two: {\r\n            icon: '<i class=\"fas fa-times\"></i>',\r\n            label: \"Cancel\"\r\n        }                \r\n        },\r\n        default: \"Cancel\",\r\n        close: html => {\r\n            if (confirmed) {\r\n              if (effectsOn) {\r\n                //add effects filter template with Tokenmagic module\r\n                let params =\r\n                [{\r\n                    filterType: \"fire\",\r\n                    intensity: 1,\r\n                    color: 0xFFFFFF,\r\n                    amplitude: 1,\r\n                    time: 0,\r\n                    blend: 2,\r\n                    fireBlend : 1,\r\n                    animated :\r\n                    {\r\n                      time : \r\n                      { \r\n                        active: true, \r\n                        speed: -0.0019, \r\n                        animType: \"move\" \r\n                      },\r\n                      intensity:\r\n                      {\r\n                        active:true,\r\n                        loopDuration: 15485,\r\n                        val1: 0.8,\r\n                        val2: 1,\r\n                        animType: \"syncCosOscillation\"\r\n                      },\r\n                      amplitude:\r\n                      {\r\n                        active:true,\r\n                        loopDuration: 4567,\r\n                        val1: 0.1,\r\n                        val2: 0.3,\r\n                        animType: \"syncCosOscillation\"\r\n                      }\r\n                      \r\n                    }\r\n                }];                        \r\n                TokenMagic.addFiltersOnSelected(params);\r\n              } else {\r\n                //add icon to token\r\n                if (!actorTokenData.data.effects.includes(noEffectsIcon)) {\r\n                  actorTokenData.toggleEffect(noEffectsIcon);\r\n                }\r\n              }                     \r\n            }\r\n          }                \r\n        }).render(true);\r\n      } else\r\n        ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);\r\n    }\r\n  } else\r\n      ui.notifications.warn(`Selected character must be a ${rageClassName} and have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/red_10.jpg","actorIds":[],"_id":"qoy78jcclRlCG1CX"}
{"name":"Bard: Vicious Mockery v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Cast Vicious Mockery on target and bring flavor from a table.\r\n\r\nlet confirmed = false;\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Vicious Mockery\";\r\nlet featTableName = \"Mockeries\";\r\nlet featAbilitySave = \"cha\";\r\nlet actorData = canvas.tokens.controlled;\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n    if (featData !== null) { //if have the required feature\r\n        if (game.user.targets.size == 1) { //if have one target\r\n            let featUpdate = duplicate(featData);\r\n            let targetActor = game.user.targets.values().next().value.actor;\r\n            let maxUses = featUpdate.data.uses.value;\r\n            let bardLevel = actorData.data.data.details.level;\r\n\r\n            let content = `<p><em>${actorData.name} is sending subtle enchantment insults to ${targetActor.data.name}.</em></p>\r\n                            <form>\r\n                                <div class=\"form-group\">\r\n                                    <label for=\"flavor\">Flavor speech:</label>\r\n                                    <input id=\"flavor\" name=\"flavor\" value=\"${featUpdate.data.chatFlavor}\"></input>\r\n                                </div>\r\n                            </form>\r\n                            <p>Leaving in blank will roll from table '${featTableName}'.</p>\r\n                            `;\r\n            new Dialog({\r\n                title: `${featName}`,\r\n                content: content,      \r\n                buttons: {     \r\n                    one: {\r\n                        icon: '<i class=\"fas fa-music\"></i>',\r\n                        label: \"Mock!\",\r\n                        callback: (html) =>\r\n                        {\r\n                            confirmed = true;\r\n                        }\r\n                    },\r\n                    three: {\r\n                        icon: '<i class=\"fas fa-times\"></i>',\r\n                        label: \"Cancel\"\r\n                    }  \r\n                },\r\n                default: \"Cancel\",\r\n                close: html => {\r\n                    if (confirmed) {\r\n\r\n                        async function main() {\r\n\r\n                            let featFlavor = html.find('#flavor')[0].value;\r\n                            featUpdate.data.chatFlavor = featFlavor;\r\n\r\n                            if (featFlavor == \"\") {\r\n                                //roll result from table\r\n                                let featTable = game.tables.entities.find(t => t.name == featTableName);                        \r\n                                if (featTable) {\r\n                                    let resultsleft = 0;\r\n                                    for (let data of featTable.data.results) {\r\n                                        if (!data.drawn) {\r\n                                            resultsleft++;\r\n                                        }\r\n                                    }\r\n                                    if (resultsleft < 1) {\r\n                                        await featTable.reset();\r\n                                    }\r\n                                    let result = featTable.roll().results[0];\r\n                                    featFlavor = result.text;\r\n                                    featTable.updateEmbeddedEntity(\"TableResult\", {\r\n                                        _id: result._id,\r\n                                        drawn: true\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            let chatMsg = `\r\n                            <div class=\"dnd5e chat-card item-card\" data-actor-id=\"${actorData.id}\" data-item-id=\"${featData.id}\" data-spell-level=\"${featData.data.data.level}\">\r\n                                <header class=\"card-header flexrow\">\r\n                                    <img src=\"${featUpdate.img}\" title=\"${featName}\" width=\"36\" height=\"36\"/>\r\n                                    <h3 class=\"item-name\">\r\n                                    ${featName}</h3>\r\n                                </header>\r\n                                <div class=\"card-content\">\r\n                                    <p><strong>${featFlavor}</strong></p>\r\n                                    <p><em>${actorData.name} insults ${targetActor.data.name}.</em></p>                                    \r\n                                    <details closed=\"\">\r\n                                        <summary>Toggle description</summary>\r\n                                        ${featUpdate.data.description.value}\r\n                                    </details>\r\n                                </div>\r\n                                <div class=\"card-buttons\">\r\n                                    <button data-action=\"save\" data-ability=\"wis\" disabled\">Save DC ${eval(8 + actorData.data.data.attributes.prof + actorData.data.data.abilities[featAbilitySave].mod)} Wisdom</button>\r\n                                </div>\r\n                            </div>\r\n                            `;\r\n                            \r\n                            let dmg = \"1d4\";\r\n                            if (bardLevel >= 17) {\r\n                                dmg = \"4d4\";\r\n                            } else if (bardLevel >= 11) {\r\n                                dmg = \"3d4\";\r\n                            } else if (bardLevel >= 5) {\r\n                                dmg = \"2d4\";\r\n                            }\r\n\r\n                            new Roll(dmg).roll().toMessage({\r\n                                speaker: ChatMessage.getSpeaker(),\r\n                                flavor: chatMsg});    \r\n\r\n                            //update actor data\r\n                            featUpdate.data.uses.value = featUpdate.data.uses.value - 1;\r\n                            actorData.updateEmbeddedEntity(\"OwnedItem\", featUpdate);\r\n\r\n                            if (effectsOn) {\r\n                                //add effects filter template with Tokenmagic module\r\n                                let params = \r\n                                [{\r\n                                   filterType: \"xbloom\",\r\n                                   autoDestroy: true,\r\n                                   threshold: 0.35,\r\n                                   bloomScale: 0,\r\n                                   brightness: 1.2,\r\n                                   blur: 0.1,\r\n                                   padding: 10,\r\n                                   quality: 15,\r\n                                   blendMode: 0,\r\n                                   animated:\r\n                                   {\r\n                                       bloomScale: \r\n                                       { \r\n                                          active: true, \r\n                                          loopDuration: 3040, \r\n                                          animType: \"syncCosOscillation\", \r\n                                          val1: 0, \r\n                                          val2: 1,\r\n                                          loops: 3\r\n                                       },\r\n                                       threshold:  \r\n                                       { \r\n                                          active: false, \r\n                                          loopDuration: 3040, \r\n                                          animType: \"syncCosOscillation\", \r\n                                          val1: 0.05, \r\n                                          val2: 1.9,\r\n                                          loops: 3\r\n                                       }\r\n                                   },\r\n                                },\r\n                                {\r\n                                    filterType: \"oldfilm\",\r\n                                    autoDestroy: true,\r\n                                    sepia: 0.9,\r\n                                    noise: 0.3,\r\n                                    noiseSize: 1.0,\r\n                                    scratch: 0.8,\r\n                                    scratchDensity: 0.5,\r\n                                    scratchWidth: 1.2,\r\n                                    vignetting: 0.3,\r\n                                    vignettingAlpha: 0.7,\r\n                                    vignettingBlur: 0.3,\r\n                                    animated:\r\n                                    {\r\n                                        seed:        \r\n                                        { \r\n                                           active: true, \r\n                                           animType: \"randomNumber\", \r\n                                           val1: 0, \r\n                                           val2: 1,\r\n                                          loops: 3\r\n                                        },\r\n                                        vignetting:  \r\n                                        { \r\n                                           active: true, \r\n                                           animType: \"syncCosOscillation\" , \r\n                                           loopDuration: 2000, \r\n                                           val1: 0.2, \r\n                                           val2: 0.4,\r\n                                           loops: 3\r\n                                        }\r\n                                    }\r\n                                },\r\n                                {\r\n                                    filterType: \"outline\",\r\n                                    color: 0x000000,\r\n                                    thickness: 0,\r\n                                }];                      \r\n                                TokenMagic.addFiltersOnSelected(params);\r\n                            }\r\n                        }\r\n                        main();                        \r\n                    }\r\n                }\r\n            }).render(true);            \r\n        } else\r\n            ui.notifications.warn(`Target one token. Double right-click if you're a player or single right-click then select target if you're GM`);\r\n    } else\r\n        ui.notifications.warn(`Selected character must have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/affliction_24.jpg","actorIds":[],"_id":"u9RZ8aiYv2YlxEcK"}
{"$$deleted":true,"_id":"Lq6QutvU3XwlaLzj"}
{"name":"General: Stealth v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Activate Stealth and apply effects\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Stealth\";\r\nlet featId = \"ste\";\r\nlet actorData = canvas.tokens.controlled;\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\n\r\nfunction toChat(endMsg) {\r\n    let chatData = {\r\n      user: game.user._id,\r\n      speaker: ChatMessage.getSpeaker(),\r\n      content: endMsg\r\n    };\r\n    ChatMessage.create(chatData, {});\r\n}\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    \r\n    actorData = actorData[0].actor;\r\n    \r\n    //check if Stealth is active\r\n    if (actorData.data.flags.stealthRoll !== null && actorData.data.flags.stealthRoll !== undefined) {\r\n\r\n        let skillCheck = actorData.data.flags.stealthRoll;\r\n\r\n        let content = `<p>${actorData.name} ${featName} check was ${skillCheck}.</em></p>`;\r\n        new Dialog({\r\n            title: `${featName}`,\r\n            content: content,      \r\n            buttons: {     \r\n                one: {\r\n                    icon: '<i class=\"fas fa-user\"></i>',                    \r\n                    label: \"Unhide\",\r\n                    callback: (html) =>               \r\n                    {\r\n                        let obj = {};\r\n                        obj['flags.stealthRoll'] = null;\r\n                        actorData.update(obj);               \r\n                        if (effectsOn)\r\n                            TokenMagic.deleteFiltersOnSelected();\r\n                    }\r\n                },\r\n                two: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: \"Show Roll\",\r\n                    callback: (html) =>               \r\n                    {\r\n                        let chatMsg = `<div class=\"dnd5e chat-card item-card\"\">${actorData.name} rolled ${skillCheck} for ${featName}.</div>`;\r\n                        toChat(chatMsg);\r\n                    }                    \r\n                },\r\n                three: {\r\n                    icon: '<i class=\"fas fa-times\"></i>',\r\n                    label: \"Cancel\"\r\n                }                \r\n            },\r\n            default: \"Cancel\"\r\n        }).render(true);\r\n\r\n    } else {\r\n\r\n        //use skill and update roll result to a flag\r\n        async function main() {\r\n            let roll = await actor.rollSkill(featId);\r\n            if (roll) {\r\n                let result = eval(roll.result);\r\n                let obj = {};\r\n                obj['flags.stealthRoll'] = result;\r\n                actorData.update(obj);\r\n                if (effectsOn) {\r\n                    //add effects filter template with Tokenmagic module\r\n                    let params =\r\n                    [{\r\n                        filterType: \"fumes\",\r\n                        color: 0x909090,\r\n                        time: 0,\r\n                        blend: 1,\r\n                        animated :\r\n                        {\r\n                            time : \r\n                            { \r\n                            active: true, \r\n                            speed: 0.0006, \r\n                            animType: \"move\" \r\n                            }\r\n                        }\r\n                    }];\r\n                    TokenMagic.addFiltersOnSelected(params);\r\n                }\r\n            }   \r\n        }\r\n        main();\r\n    }\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/green_18.jpg","actorIds":[],"_id":"0r3BNJN2YEyu4NmC"}
{"$$deleted":true,"_id":"PryVSQ1gLajxRoIw"}
{"name":"Paladin: Divine Sense v1.0","permission":{"default":0,"V6X0DLsLlv9AkUXY":3},"type":"script","flags":{"combat-utility-belt":{"macroTrigger":""},"furnace":{"runAsGM":false}},"scope":"global","command":"//Activate Divine Sense and apply effects\r\n\r\n//edit if required, must be equal to character sheet\r\nlet featName = \"Divine Sense\";\r\nlet actorData = canvas.tokens.controlled;\r\n\r\n//enable effects, requires Tokenmagic module\r\nlet effectsOn = true;\r\n\r\nif (actorData.length == 1) { //if only one is selected\r\n    actorData = actorData[0].actor;\r\n    let featData = actorData ? actorData.items.find(i => i.name===featName) : null;\r\n    if (featData !== null) { //if have the required feature\r\n        if(featData.data.data.uses.value > 0) { //check if there are uses available              \r\n                       \r\n            //roll dice and update actor  \r\n            //use the feature\r\n            async function main() {\r\n                let roll = await featData.roll();\r\n\r\n                if (roll) {\r\n                    if (effectsOn) {\r\n                        //add effects filter template with Tokenmagic module\r\n                        let params =\r\n                        [{\r\n                            filterType: \"wave\",\r\n                            autoDestroy: true,\r\n                            time: 0,\r\n                            anchorX: 0.5,\r\n                            anchorY: 0.5,\r\n                            strength: 0.015,\r\n                            frequency: 60,\r\n                            color: 0xFFFFFF,\r\n                            maxIntensity: 3.0,\r\n                            minIntensity: 0.8,\r\n                            padding:10,\r\n                            loops: 1,\r\n                            animated :\r\n                            {\r\n                            time : \r\n                            { \r\n                                active: true, \r\n                                speed: 0.0085, \r\n                                animType: \"move\",\r\n                                loops: 3\r\n                            },\r\n                            anchorX :\r\n                            {\r\n                                active: false,\r\n                                val1: 0.15,\r\n                                val2: 0.85,\r\n                                animType: \"syncCosOscillation\",\r\n                                loopDuration: 20000,\r\n                                loops: 3\r\n                            },\r\n                            anchorY :\r\n                            {\r\n                                active: false,\r\n                                val1: 0.15,\r\n                                val2: 0.85,\r\n                                animType: \"syncSinOscillation\",\r\n                                loopDuration: 20000,\r\n                                loops: 3\r\n                            }\r\n                            }\r\n                        }];\r\n                        TokenMagic.addFiltersOnSelected(params);\r\n                    }\r\n                }\r\n            }\r\n            main();\r\n        } else\r\n            ui.notifications.warn(`${actorData.name} does not have any uses of ${featName} left.`);\r\n    } else\r\n        ui.notifications.warn(`Selected character must have ${featName} feature.`);\r\n} else if (actorData.length > 1)\r\n    ui.notifications.warn(`Select only one token.`);\r\nelse\r\n    ui.notifications.warn(`Select one token.`);","author":"V6X0DLsLlv9AkUXY","img":"systems/dnd5e/icons/skills/light_02.jpg","actorIds":[],"_id":"8maIFSZnyoZDQfFT"}
